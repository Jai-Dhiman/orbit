---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Orbit Project

## Monorepo Architecture

### Project and File Structure

- `/packages` - Shared code packages
  - `/core` - Shared business logic
    - `/api` - API abstractions and service functions
    - `/types` - Shared type definitions 
    - `/utils` - Utility functions used across platforms
    - `/hooks` - Shared custom hooks
    - `/state` - Cross-platform state management
  - `/ui` - Shared UI components
    - `/components` - Cross-platform UI components
    - `/styles` - Shared styles and themes
    - `/assets` - Shared images and icons

- `/apps` - Platform-specific applications
  - `/mobile` - Mobile application (Expo)
    - `/app` - Expo Router directory
      - `/[...unmatched].tsx` - 404 handler
      - `/_layout.tsx` - Root layout
      - `/index.tsx` - Home screen
      - `/notes/` - Notes routes
      - `/calendar/` - Calendar routes
      - `/auth/` - Auth routes
    - `/src` - Mobile app source code
      - `/features` - Feature modules (vertical slicing)
        - `/notes` - Note-taking feature
          - `/components` - Feature-specific components
          - `/api` - Feature-specific API calls
          - `/hooks` - Feature-specific hooks
          - `/types` - Feature-specific types
          - `/utils` - Feature-specific utilities
          - `/stores` - Feature-specific state
          - `index.ts` - Public exports
        - `/calendar` - Calendar management
        - `/auth` - Authentication 
        - `/profile` - User profile
      - `/components` - Shared app components
      - `/providers` - Context providers
      - `/utils` - Utility functions
      - `/constants` - App constants
      - `/lib` - Third-party library wrappers
      - `/assets` - Static assets
  - `/server` - Shared backend
    - `/convex` - Convex backend code
      - `/schema` - Database schema
      - `/functions` - Server functions
      - `/auth` - Authentication logic

### Code Sharing Strategy

- Core business logic, API calls, and utilities in `/packages/core`
- Shared UI components in `/packages/ui`
- Platform-specific code in respective app directories
- Convex backend shared across all platforms

### Naming Conventions

- Components: PascalCase (e.g., `CalendarWidget.tsx`)
- Hooks: camelCase with 'use' prefix (e.g., `useNotifications.ts`)
- Utilities: camelCase (e.g., `formatDateTime.ts`)
- Store files: camelCase with 'store' suffix (e.g., `notificationStore.ts`)
- Query files: camelCase with 'queries' suffix (e.g., `calendarQueries.ts`)
- Route files: kebab-case or descriptive names in directories

## Package Management with Bun

- Use Bun as the preferred package manager
- Run `bun install` to install dependencies
- Manage scripts via `bun run [script]` as defined in package.json
- Use `bun.lockb` for deterministic builds
- When adding new dependencies, use `bun add [package]` (or `bun add -d [package]` for dev dependencies)

## Styling with NativeWind and Shadcn UI

### NativeWind (Tailwind for React Native)

- Use Tailwind utility classes for styling components
- Follow mobile-first approach for responsive design
- Use `clsx` or `cn` utility for conditional class names
- Configure theme tokens in `tailwind.config.js`
- Use CSS variables for dynamic theming

### Shadcn UI (react-native-reusables)

- Use Shadcn components adapted for React Native through nativecn
- Customize appearance through the Tailwind theme configuration
- Maintain accessibility standards when customizing components
- Use Lucide icons consistently throughout the app

## State Management with Zustand and MMKV

### Zustand Store Structure

- Create separate stores for different features (vertical slicing)
- Keep state minimal and normalized
- Define actions within the store
- Implement proper TypeScript typing for stores
- Use MMKV as persistence layer for Zustand

### Usage Patterns

- Use selectors to access specific state slices
- Avoid unnecessary re-renders by selecting only needed data
- Implement middleware for side effects or persistence
- Store only client state in Zustand; server state should be in TanStack Query

## TanStack Query Best Practices

- Create custom hooks for each query to encapsulate query logic
- Use prefetching for anticipated data needs
- Implement appropriate query keys with proper structure
- Implement optimistic updates for mutations when appropriate
- Use query invalidation strategically to maintain data freshness
- Separate server state (TanStack Query) from client state (Zustand)

## TanStack Form Best Practices

- Create reusable form configurations with consistent validation
- Leverage schema-based validation (Zod) integrated with TanStack Form
- Implement proper TypeScript typing for form values and errors
- Implement field-level, form-level, and submission error handling
- Display errors in accessible, user-friendly ways
